%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | decs | dec | tydec | vardec | fundec | ty | tyfields | tyfield 
| lvalue | sequence | multiExp | mExp | op | cop | bop | items | item 
| arithmetic | comparison | logical | funcall | record | array


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%left ASSIGN OF ELSE THEN DO
%left OR
%left AND
%left EQ NEQ GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE
%right LBRACK



%%

program	: exp				()

decs    : dec decs ()
dec     : tydec ()
        | vardec ()
        | fundec ()


tydec   : TYPE ID EQ ty ()
ty      : ID ()
        | LPAREN tyfields RPAREN ()
        | ARRAY OF ID ()

tyfields : tyfield ()
         | tyfield COMMA tyfields ()

tyfield : ID SEMICOLON ID ()

vardec : VAR ID ASSIGN exp ()
      | VAR ID COLON ID ASSIGN exp ()

fundec  : FUNCTION ID LBRACE tyfields RBRACE EQ exp ()
        | FUNCTION ID LBRACE tyfields RBRACE COLON ID EQ exp ()
	
lvalue : ID ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()

sequence : LBRACE multiExp RBRACE ()

multiExp : exp ()
        | exp SEMICOLON multiExp () 

mExp : exp ()
    | exp COMMA mExp ()

items : item ()
      | item COMMA items ()
item : ID EQ exp ()
record : ID LPAREN items  RPAREN ()
arithmetic : exp TIMES exp ()
      | exp DIVIDE exp ()
      | exp PLUS exp ()
      | exp MINUS exp ()

comparison : exp EQ exp ()
      | exp NEQ exp ()
      | exp GE exp ()
      | exp GT exp ()
      | exp LE exp ()
      | exp LT exp ()

logical : exp AND exp ()
| exp OR exp ()

funcall : ID LBRACE RBRACE ()
        | ID LBRACE mExp RBRACE ()





exp     
        : lvalue ()
        | NIL ()
        | sequence ()
        | LBRACE RBRACE ()
        | INT ()
        | STRING ()
        | MINUS exp %prec MINUS ()
        | funcall ()
        | arithmetic ()
        | comparison ()
        | logical ()
        | record ()
        | lvalue ASSIGN exp ()
        | IF exp THEN exp ELSE exp ()
        | IF exp THEN exp ()
        | WHILE exp DO exp ()
        | FOR ID ASSIGN exp TO exp DO exp ()
        | LET decs IN multiExp END ()
        (* | LBRACE exp RBRACE () *)


      